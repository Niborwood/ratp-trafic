{"version":3,"sources":["ColorModeSwitcher.js","Stations.js","FormInput.js","Stats.js","Filters.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Station","stationsList","stationsData","map","station","padding","base","md","str","fields","toLowerCase","replace","txt","charAt","toUpperCase","substr","ville","arrondissement_pour_paris","isNumeric","trafic","toLocaleString","rang","recordid","length","status","colorScheme","FormInput","value","handleChange","onSubmitForm","action","placeholder","focusBorderColor","onChange","type","px","leftIcon","Search","Stats","totalStations","displayedStations","traficSort","areaSort","percentOfStations","Math","round","border","borderColor","borderRadius","mb","sm","textTransform","Filters","sortByTrafic","sortByArea","resetFilters","justify","as","Button","width","defaultValue","title","event","currentTarget","App","useState","setValue","confirmedValue","setConfirmedValue","setStationsData","areStationsLoading","setAreStationsLoading","setTotalStations","setTraficSort","setAreaSort","loadData","areaParam","axios","get","then","response","data","nhits","stationsRecords","records","filteredStations","filter","includes","catch","error","console","log","finally","useEffect","theme","textAlign","align","min-h","justifySelf","spacing","w","isTruncated","target","preventDefault","thickness","speed","emptyColor","Stations","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.96990e4a.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  TableCaption,\r\n  Alert,\r\n  AlertIcon,\r\n} from \"@chakra-ui/react\"\r\n\r\nfunction Station({ stationsData }) {\r\n  const upperCaseToEveryWord = (str) => {\r\n    return str.replace(/\\w\\S*/g, (txt) => {\r\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n  };\r\n\r\n  const stationsList = stationsData.map((station) => {\r\n    return (\r\n      <Tr key={station.recordid} >\r\n        <Td padding={{base:0, md:2}}>{upperCaseToEveryWord(station.fields.station.toLowerCase())}</Td>\r\n        <Td padding={{base:0, md:2}}>{station.fields.ville} {station.fields.arrondissement_pour_paris ? `(${station.fields.arrondissement_pour_paris})` : null}</Td>\r\n        <Td isNumeric padding={{base:0, md:2}}>{station.fields.trafic.toLocaleString()}</Td>\r\n        <Td isNumeric padding={{base:0, md:2}}>{station.fields.rang}</Td>\r\n      </Tr>\r\n    )\r\n  });\r\n\r\n  return (\r\n    stationsList.length === 0 ?\r\n      <Alert status=\"error\" variant=\"left-accent\">\r\n        <AlertIcon />\r\n        Aucune gare ne contient ces termes.\r\n      </Alert>\r\n      :\r\n      <Table size={{base:\"sm\", md:\"md\"}} variant=\"striped\" colorScheme=\"teal\">\r\n        <TableCaption>Trafic par station de métro, sur l'année 2020 (Source : RATP)</TableCaption>\r\n        <Thead>\r\n          <Tr>\r\n            <Th>Nom</Th>\r\n            <Th>Ville</Th>\r\n            <Th isNumeric>Trafic</Th>\r\n            <Th isNumeric>Rang</Th>\r\n          </Tr>\r\n        </Thead>\r\n        <Tbody>\r\n          {stationsList}\r\n        </Tbody>\r\n      </Table>\r\n  )\r\n}\r\n\r\nStation.propTypes = {\r\n  stationsData: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Station;\r\n\r\n","import React from 'react'\r\nimport { Input, Button, HStack } from '@chakra-ui/react'\r\nimport { SearchIcon } from '@chakra-ui/icons'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction FormInput({ value, handleChange, onSubmitForm }) {\r\n\r\n\r\n    return (\r\n        <>\r\n            <form action=\"\">\r\n                <HStack>\r\n                    <Input\r\n                        placeholder=\"Nom de la gare (sans accents)\"\r\n                        size=\"md\"\r\n                        variant=\"filled\"\r\n                        focusBorderColor=\"teal.400\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        px={8}\r\n                        leftIcon={<SearchIcon />}\r\n                        colorScheme=\"teal\"\r\n                        variant=\"solid\"\r\n                        onClick={onSubmitForm}>\r\n                        Rechercher\r\n                    </Button>\r\n                </HStack>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nFormInput.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func.isRequired,\r\n    onSubmitForm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FormInput\r\n\r\n","import React from 'react'\r\nimport { Stat, StatGroup, StatLabel, StatNumber, Badge } from '@chakra-ui/react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Stats({ totalStations, displayedStations, traficSort, areaSort }) {\r\n    let percentOfStations = Math.round(displayedStations / totalStations * 100);\r\n    if (percentOfStations === 0 && displayedStations > 0) {\r\n        percentOfStations = 1;\r\n    }\r\n\r\n    return (\r\n        <StatGroup border=\"1px\" borderColor=\"teal.500\" borderRadius=\"md\" padding={4}>\r\n\r\n            <Stat mb={{base:4, sm:0}}>\r\n                <StatLabel>{displayedStations === 1 ? 'Station affichée' : 'Stations Affichées'}</StatLabel>\r\n                <StatNumber>{displayedStations}</StatNumber>\r\n                <Badge colorScheme={displayedStations === 0 ? 'red' : 'gray'}>{percentOfStations}% des stations totales</Badge>\r\n            </Stat>\r\n\r\n            <Stat>\r\n                <StatLabel>Tri par rang</StatLabel>\r\n                <StatNumber>{traficSort === 'rang' ? 'Croissant' : 'Décroissant'}</StatNumber>\r\n                <Badge colorScheme=\"teal\">Trafic</Badge>\r\n            </Stat>\r\n\r\n            <Stat>\r\n                <StatLabel>Filtre géographique</StatLabel>\r\n                <StatNumber textTransform='capitalize'>{areaSort === 'null' ? 'Toutes zones' : areaSort}</StatNumber>\r\n                <Badge colorScheme=\"teal\">Zone</Badge>\r\n            </Stat>\r\n\r\n        </StatGroup>\r\n    )\r\n}\r\n\r\nStats.propTypes = {\r\n    totalStations: PropTypes.any,\r\n    displayedStations: PropTypes.number.isRequired,\r\n    traficSort: PropTypes.string.isRequired,\r\n    areaSort: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Stats\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Menu,\r\n    MenuButton,\r\n    MenuList,\r\n    MenuItemOption,\r\n    MenuOptionGroup,\r\n    MenuDivider,\r\n    Button,\r\n    HStack,\r\n} from \"@chakra-ui/react\"\r\n\r\n\r\nfunction Filters({ sortByTrafic, sortByArea, traficSort, areaSort, resetFilters }) {\r\n    return (\r\n        <HStack justify=\"center\">\r\n            <Menu>\r\n                <MenuButton as={Button} colorScheme=\"teal\">\r\n                    Trier par...\r\n                </MenuButton>\r\n                <MenuList width=\"240px\">\r\n                    <MenuOptionGroup defaultValue={traficSort} title=\"Par trafic\" type=\"radio\" >\r\n                        <MenuItemOption\r\n                            value=\"-rang\"\r\n                            onClick={\r\n                                (event) => {\r\n                                    sortByTrafic(event.currentTarget.value)\r\n                                }\r\n                            }>Décroissant</MenuItemOption>\r\n                        <MenuItemOption\r\n                            value=\"rang\"\r\n                            onClick={\r\n                                (event) => {\r\n                                    sortByTrafic(event.currentTarget.value)\r\n                                }\r\n                            }>Croissant</MenuItemOption>\r\n                    </MenuOptionGroup>\r\n                    <MenuDivider />\r\n                    <MenuOptionGroup defaultValue={areaSort} title=\"Par ville\" type=\"radio\">\r\n                        <MenuItemOption\r\n                        value=\"null\"\r\n                        onClick={(event) => {\r\n                            sortByArea(event.currentTarget.value)\r\n                        }}\r\n                        >Tous</MenuItemOption>\r\n                        <MenuItemOption\r\n                        value=\"paris\"\r\n                        onClick={(event) => {\r\n                            sortByArea(event.currentTarget.value)\r\n                        }}\r\n                        >Paris</MenuItemOption>\r\n                        <MenuItemOption\r\n                        value=\"banlieue\"\r\n                        onClick={(event) => {\r\n                            sortByArea(event.currentTarget.value)\r\n                        }}\r\n                        >Banlieue</MenuItemOption>\r\n                    </MenuOptionGroup>\r\n                </MenuList>\r\n            </Menu>\r\n            <Button onClick={resetFilters} colorScheme=\"teal\" variant=\"outline\">Réinitialiser les filtres</Button>\r\n        </HStack>\r\n    )\r\n}\r\n\r\nFilters.propTypes = {\r\n    sortByTrafic: PropTypes.func.isRequired,\r\n    sortByArea: PropTypes.func.isRequired,\r\n    traficSort: PropTypes.string.isRequired,\r\n    areaSort: PropTypes.string.isRequired,\r\n    resetFilters: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Filters;\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport {\n  ChakraProvider,\n  Stack,\n  Text,\n  theme,\n  Heading,\n  HStack,\n  Divider,\n  Spinner,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport Stations from './Stations';\nimport FormInput from './FormInput'\nimport Stats from './Stats';\nimport Filters from './Filters';\n\nfunction App() {\n\n  const [value, setValue] = useState(\"\");\n  const [confirmedValue, setConfirmedValue] = useState(\"\");\n  const handleChange = (event) => setValue(event.target.value);\n  const [stationsData, setStationsData] = useState([]);\n  const [areStationsLoading, setAreStationsLoading] = useState(false);\n  const [totalStations, setTotalStations] = useState('null');\n  const [traficSort, setTraficSort] = useState('-rang');\n  const [areaSort, setAreaSort] = useState('null');\n\n  const loadData = () => {\n    setAreStationsLoading(true);\n\n    // Add Area Param to API URL\n    let areaParam = '';\n    switch (areaSort) {\n      case 'paris':\n        areaParam = '&refine.ville=Paris';\n        break;\n\n      case 'banlieue':\n        areaParam = '&exclude.ville=Paris';\n        break;\n    \n      default:\n        break;\n    }\n\n    axios.get(`https://data.ratp.fr/api/records/1.0/search/?dataset=trafic-annuel-entrant-par-station-du-reseau-ferre-2020&q=&sort=${traficSort}&rows=305&facet=reseau&facet=station&facet=ville&facet=arrondissement_pour_paris&refine.reseau=M%C3%A9tro${areaParam}`)\n      .then(response => {\n        if (totalStations === 'null') {\n          setTotalStations(response.data.nhits);\n        }\n\n        const stationsRecords = response.data.records;\n        if (!value) {\n          setStationsData(stationsRecords)\n        } else {\n          const filteredStations = stationsRecords.filter(station => station.fields.station.toLowerCase().includes(confirmedValue.toLowerCase()));\n          setStationsData(filteredStations);\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(() => {\n        setAreStationsLoading(false);\n      });\n   \n  }\n\n  // Load Data on init & on every state change\n  useEffect(() => {\n    loadData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [traficSort, areaSort, confirmedValue]);\n\n  // SORTING AND FILTERING\n  const handleFormSubmit = (event) => {\n    setAreStationsLoading(true);\n    event.preventDefault();\n    setConfirmedValue(value);\n    loadData();\n  }\n\n  const sortByTrafic = (value) => {\n    setAreStationsLoading(true);\n    setTraficSort(value);\n  }\n\n  const sortByArea = (value) => {\n    setAreStationsLoading(true);\n    setAreaSort(value);\n  }\n\n  const resetFilters = () => {\n    setAreStationsLoading(true);\n    setValue('');\n    setConfirmedValue('');\n    setAreaSort('null');\n    setTraficSort('-rang');\n  }\n\n  // RETURN\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Stack textAlign=\"center\" align=\"center\" min-h=\"100vh\">\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n        <Stack spacing={4} w={{base:\"xs\", md:\"lg\"}}>\n          <Heading as=\"h1\" size=\"2xl\" isTruncated>\n            <HStack justify=\"center\" mb={8}>\n              <Text color=\"teal.500\">RATP</Text> <Text>Metro Traffic</Text>\n            </HStack>\n          </Heading>\n          <FormInput value={value} handleChange={handleChange} onSubmitForm={handleFormSubmit} />\n          {/* <Divider /> */}\n\n          {areStationsLoading ?\n            <HStack justify=\"center\">\n              <Spinner\n                thickness=\"4px\"\n                speed=\"0.65s\"\n                emptyColor=\"gray.200\"\n                color=\"teal.500\"\n                size=\"xl\"\n                align=\"center\"\n              />\n            </HStack>\n            :\n            <>\n              <Stats totalStations={totalStations} displayedStations={stationsData.length} traficSort={traficSort} areaSort={areaSort} />\n              <Filters \n              sortByTrafic={sortByTrafic} \n              traficSort={traficSort} \n              areaSort={areaSort}\n              sortByArea={sortByArea}\n              resetFilters={resetFilters}\n               />\n              <Divider />\n              <Stations\n                stationsData={stationsData}\n              />\n            </>}\n          <Text fontSize=\"xs\">By Robin Souriau</Text>\n        </Stack>\n      </Stack>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}